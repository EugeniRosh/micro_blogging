# Generated by Django 4.2.4 on 2023-09-05 14:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profiles',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique': 'A user with that username already exists.'
                        },
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name='username',
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True, max_length=150, verbose_name='first name'
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True, max_length=150, verbose_name='last name'
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text=(
                            'Designates whether this user should be treated as active. '
                            'Unselect this instead of deleting accounts.'
                        ),
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='date joined'
                    ),
                ),
                ('email', models.CharField(max_length=100, unique=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                (
                    'photo',
                    models.ImageField(
                        blank=True, upload_to='user_profile/photo/%Y/%m/%d/'
                    ),
                ),
                ('description', models.CharField(blank=True, max_length=200)),
                ('date_of_birth', models.DateField(null=True)),
                ('update_at', models.DateField(auto_now=True)),
            ],
            options={
                'db_table': 'profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('tag', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Twits',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('text', models.CharField(max_length=400)),
                (
                    'answer_to_twit',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='answer',
                        to='core.twits',
                    ),
                ),
            ],
            options={
                'db_table': 'twits',
            },
        ),
        migrations.CreateModel(
            name='TwitsTags',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='twit_tag',
                        to='core.tags',
                    ),
                ),
                (
                    'twit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tags_twit',
                        to='core.twits',
                    ),
                ),
            ],
            options={
                'db_table': 'twits_tags',
            },
        ),
        migrations.CreateModel(
            name='TwitsProfilesReposts',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                (
                    'profile',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='twits_repost',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'twit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='profiles_repost',
                        to='core.twits',
                    ),
                ),
            ],
            options={
                'db_table': 'twits_profiles_reposts',
            },
        ),
        migrations.CreateModel(
            name='TwitsProfilesNotifications',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                (
                    'profile',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='twits_notification',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'twit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='profiles_notification',
                        to='core.twits',
                    ),
                ),
            ],
            options={
                'db_table': 'twits_profiles_notifications',
            },
        ),
        migrations.CreateModel(
            name='TwitsProfilesLikes',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                (
                    'profile',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='twits_like',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'twit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='profiles_like',
                        to='core.twits',
                    ),
                ),
            ],
            options={
                'db_table': 'twits_profiles_likes',
            },
        ),
        migrations.AddField(
            model_name='twits',
            name='like',
            field=models.ManyToManyField(
                related_name='likes',
                through='core.TwitsProfilesLikes',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='twits',
            name='profile',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='twits',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='twits',
            name='repost',
            field=models.ManyToManyField(
                related_name='reposts',
                through='core.TwitsProfilesReposts',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='twits',
            name='tag',
            field=models.ManyToManyField(through='core.TwitsTags', to='core.tags'),
        ),
        migrations.CreateModel(
            name='Followers',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                (
                    'follower',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='user_follower',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'following',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='user_following',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'followers',
            },
        ),
        migrations.CreateModel(
            name='EmailConfirmationCode',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=100)),
                ('expiration', models.PositiveIntegerField()),
                (
                    'profile',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='emailconfirmationcode',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'email_confirmation_codes',
            },
        ),
        migrations.AddField(
            model_name='profiles',
            name='followers',
            field=models.ManyToManyField(
                through='core.Followers', to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='profiles',
            name='groups',
            field=models.ManyToManyField(
                blank=True,
                help_text=(
                    'The groups this user belongs to. '
                    'A user will get all permissions granted to each of their groups.'
                ),
                related_name='user_set',
                related_query_name='user',
                to='auth.group',
                verbose_name='groups',
            ),
        ),
        migrations.AddField(
            model_name='profiles',
            name='notification',
            field=models.ManyToManyField(
                through='core.TwitsProfilesNotifications', to='core.twits'
            ),
        ),
        migrations.AddField(
            model_name='profiles',
            name='user_permissions',
            field=models.ManyToManyField(
                blank=True,
                help_text='Specific permissions for this user.',
                related_name='user_set',
                related_query_name='user',
                to='auth.permission',
                verbose_name='user permissions',
            ),
        ),
        migrations.AddConstraint(
            model_name='twitstags',
            constraint=models.UniqueConstraint(
                fields=('twit', 'tag'), name='unique_twits_tags'
            ),
        ),
        migrations.AddConstraint(
            model_name='twitsprofilesreposts',
            constraint=models.UniqueConstraint(
                fields=('twit', 'profile'), name='unique_reposts'
            ),
        ),
        migrations.AddConstraint(
            model_name='twitsprofilesnotifications',
            constraint=models.UniqueConstraint(
                fields=('twit', 'profile'), name='unique_notification'
            ),
        ),
        migrations.AddConstraint(
            model_name='twitsprofileslikes',
            constraint=models.UniqueConstraint(
                fields=('twit', 'profile'), name='unique_likes'
            ),
        ),
        migrations.AddConstraint(
            model_name='followers',
            constraint=models.UniqueConstraint(
                fields=('follower', 'following'), name='unique_followers'
            ),
        ),
    ]
